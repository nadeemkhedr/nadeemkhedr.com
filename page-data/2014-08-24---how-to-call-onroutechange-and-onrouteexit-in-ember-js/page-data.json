{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014-08-24---how-to-call-onroutechange-and-onrouteexit-in-ember-js/","result":{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr"}},"markdownRemark":{"id":"37b06ce3-5213-5e61-b381-d351315aaf6d","excerpt":"A two scenarios that I always encounter while developing an ember app are: When the user is in edit/create page and is editing an ember model, I want to…","html":"<p>A two scenarios that I always encounter while developing an ember app are:</p>\n<ul>\n<li>When the user is in edit/create page and is editing an ember model, I want to rollback that model when the user clicks on any link on the page</li>\n<li>I want to globally hide any error message shown when the route changes</li>\n</ul>\n<p>Ember actually has features to make you implment these scenarios but its not exactly clear on how to do it.</p>\n<h3>How to implement a global onRouteChange</h3>\n<p>we will be using <a href=\"http://emberjs.com/guides/routing/preventing-and-retrying-transitions/#toc_preventing-transitions-via-code-willtransition-code\">willTransition</a> , it will be called when trying to access a certain route <em>(on entering not on exiting)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">App<span class=\"token punctuation\">.</span>ApplicationRoute <span class=\"token operator\">=</span> Em<span class=\"token punctuation\">.</span>Route<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">willTransition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">transition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">controllerFor</span><span class=\"token punctuation\">(</span>transition<span class=\"token punctuation\">.</span>targetName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        errorMessages<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What we have done in the previous example, is on the <code class=\"language-text\">ApplicationRoute</code> we put a <code class=\"language-text\">willTransition</code>, this means when the url changes this function will be called everytime with different <code class=\"language-text\">transition</code> object passed to it depending on the actual route that the user is trying to access</p>\n<p>To get the controller that the user is accessing, you have to call</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">controllerFor</span><span class=\"token punctuation\">(</span>transition<span class=\"token punctuation\">.</span>targetName<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>How to implement an onRouteExit</h3>\n<p>we will be overriding <code class=\"language-text\">exit</code> method on the specific route that you want to add functionality to it</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">App<span class=\"token punctuation\">.</span>ItemEditRoute <span class=\"token operator\">=</span> Em<span class=\"token punctuation\">.</span>Route<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">exit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">modelFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>exit is considered private so you have to call <code class=\"language-text\">this._super()</code> when you write one</p>\n</blockquote>\n<blockquote>\n<p>In Ember 1.7 there is <a href=\"http://emberjs.com/api/classes/Ember.Route.html#method_resetController\">resetController </a>method on the route that will give you the same functionality and its public</p>\n</blockquote>","frontmatter":{"title":"How to call onRouteChange and onRouteExit in Ember.js","date":"August 24, 2014","description":null}},"previous":{"fields":{"slug":"/2014-08-18---ember-js-custom-select-with-change-event/"},"frontmatter":{"title":"Ember.js Custom Select with Change Event Callback"}},"next":{"fields":{"slug":"/2014-10-20---easy-javascript-plugin-development-using-gulpjs/"},"frontmatter":{"title":"Easy Javascript plugin development using gulpjs"}}},"pageContext":{"id":"37b06ce3-5213-5e61-b381-d351315aaf6d","previousPostId":"59dfeaa1-005f-5f95-a968-29efe2665f70","nextPostId":"de856d92-fad8-5ed0-b727-2c7f1d731983"}},"staticQueryHashes":["2841359383","3257411868"]}
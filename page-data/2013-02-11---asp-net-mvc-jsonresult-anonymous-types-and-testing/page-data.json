{"componentChunkName":"component---src-templates-blog-post-js","path":"/2013-02-11---asp-net-mvc-jsonresult-anonymous-types-and-testing/","result":{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr"}},"markdownRemark":{"id":"d4e00a82-d7bf-5806-af0d-6b19c6da5f2c","excerpt":"This article is an explanation on how to access the data from a  for using it in your unit testing The  type has a property called  of type  that you can parse…","html":"<p>This article is an explanation on how to access the data from a <code class=\"language-text\">JsonResult</code> for using it in your unit testing</p>\n<p>The <code class=\"language-text\">JsonResult</code> type has a property called <code class=\"language-text\">Data</code> of type <code class=\"language-text\">Object</code> that you can parse if you have used a concrete object as your data not an anonymous one</p>\n<p><strong>for example:</strong></p>\n<h3>Model</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Controller Action</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">JsonResult</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Logic …</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span>\n  <span class=\"token punctuation\">{</span>\n    Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Nadeem\"</span><span class=\"token punctuation\">,</span>\n    Age <span class=\"token operator\">=</span> <span class=\"token string\">\"24\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Json</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Unit Test</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HomeController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>Data <span class=\"token keyword\">as</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//you can now access the Person properties</span>\n\n <span class=\"token comment\">//Assert</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>This is all good but we get stuck if we want to pass an anonymous object to our <code class=\"language-text\">JsonResult</code> there is no way to cast to something to access an anonymous object properties</p>\n<p>the solution is I’ve made two custom helper methods that we can use to get values from a <code class=\"language-text\">JsonResult.Data</code> object</p>\n<p>I’ll follow after with an example of using it</p>\n<h3>The custom helper:</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Helper</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">JsonResult</span> result<span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Web<span class=\"token punctuation\">.</span>Routing<span class=\"token punctuation\">.</span>RouteValueDictionary</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> wrapper<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">GetValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">JsonResult</span> result<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Example:</h2>\n<h3>Controller Action</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">JsonResult</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Logic …</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Unit Test</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HomeController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Assert<span class=\"token punctuation\">.</span><span class=\"token function\">AreEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is how to test a <code class=\"language-text\">JsonResult</code> using  anonymous types</p>\n<hr>\n<h2>For the fun of it we can make a helper that returns a dynamic type</h2>\n<h3>The custom helper:</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">dynamic</span></span> <span class=\"token function\">ToDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">JsonResult</span> jsonResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> expandoObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ExpandoObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> expandoCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ICollection<span class=\"token operator\">&lt;</span>KeyValuePair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token operator\">>></span><span class=\"token punctuation\">)</span>expandoObject<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dataWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RouteValueDictionary</span><span class=\"token punctuation\">(</span>jsonResult<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> kvp <span class=\"token keyword\">in</span> dataWrapper<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    expandoCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>kvp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> eoDynamic <span class=\"token operator\">=</span> expandoObject<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> eoDynamic<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Unit Test</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Testing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HomeController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Assert<span class=\"token punctuation\">.</span><span class=\"token function\">AreEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">ToDynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Asp.net MVC JsonResult, Anonymous types and Testing","date":"February 10, 2013","description":null}},"previous":{"fields":{"slug":"/2013-01-29---knockout-view-model-binding-variations-to-a-page/"},"frontmatter":{"title":"Knockout view model binding variations to a page"}},"next":{"fields":{"slug":"/2013-07-06---csv-how-to-upload-and-read-from-it-in-a-clean-way-using-asp-net-mvc/"},"frontmatter":{"title":"CSV how to upload and read from it , in a clean way using Asp.net MVC"}}},"pageContext":{"id":"d4e00a82-d7bf-5806-af0d-6b19c6da5f2c","previousPostId":"38a4bb77-f070-5c62-aaca-eaf69112a149","nextPostId":"f73fdb8e-5b58-567c-a146-0076716a6752"}},"staticQueryHashes":["2841359383","48398127"]}
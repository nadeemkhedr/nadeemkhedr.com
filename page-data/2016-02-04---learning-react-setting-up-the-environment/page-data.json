{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-02-04---learning-react-setting-up-the-environment/","result":{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr"}},"markdownRemark":{"id":"292eb9a3-1708-5960-a614-02e6c80fb347","excerpt":"Learning React Series In this series I wanna discuss my learning experience with , this will be an opinionated series on what I think of  & other libraries, Why…","html":"<h2>Learning React Series</h2>\n<p>In this series I wanna discuss my learning experience with <code class=\"language-text\">ReactJS</code>, this will be an opinionated series on what I think of <code class=\"language-text\">ReactJS</code> &#x26; other libraries, Why I switched to it, and why I think <code class=\"language-text\">ReactJS</code> is <em>awesome</em>, along side all the opinions I will be sharing code on what I am learning and explaining how it all works.</p>\n<blockquote>\n<p>Note: I have created a github repo that contains all the source code for this article <a href=\"https://github.com/nadeemkhedr/learning-react-series\">here</a></p>\n</blockquote>\n<h3>Why I bothered learning a new framework</h3>\n<p>I’ve been a frontend developer for a while now, the last 4 years my work was mostly <code class=\"language-text\">AngularJS 1.x</code> &#x26; <code class=\"language-text\">EmberJS</code> and I think I’m comfortable with both.</p>\n<p>For me it all started by checking out <code class=\"language-text\">AngularJS</code> and building small apps with it, until the apps I was working on got bigger, I learned about <code class=\"language-text\">AngularJS</code> more &#x26; knew that the code I wrote was terrible and need a BIG refactoring <em>(I think this happened to most)</em>, because <code class=\"language-text\">AngularJS</code> is pretty relaxed, there is no restrictions on where to put things, and that was one of the biggest dis-advantages. at least from my perspective</p>\n<p>Then life went by and then I started working with a project built with <code class=\"language-text\">EmberJS</code> I think it was still in beta, and I had a really difficult time learning it, the concepts were totally different from <code class=\"language-text\">AngularJS</code> and I hated it at first.</p>\n<p>After that it all clicked, and I <strong>LOVED</strong> <code class=\"language-text\">EmberJS</code> <em>(And still loving it)</em> been working with it exclusively on various projects for the last couple of years.</p>\n<p>Until one of my tasks was to make a big app more performant, the problem was that there were too many <code class=\"language-text\">properties</code> &#x26; <code class=\"language-text\">observers</code> so any change triggered list refresh multiple times, dealing with the meta language of ember and the two way bindings was just too much headache, during that time, <code class=\"language-text\">React</code> was on fire and I decided to take a look, at first honestly I though its just too difficult, then now even tho I didn’t work on any real/big projects with <code class=\"language-text\">React</code> it is my new favourite Library</p>\n<blockquote>\n<p>Note: ember team agrees and they are embracing all the core <code class=\"language-text\">React</code> concepts and they are in the process of integrating them in ember, but this topic is for another article</p>\n</blockquote>\n<h3>Setting up the environment</h3>\n<p><code class=\"language-text\">React</code> doesn’t come with a build tool to init the app, instead you have to do it manually.</p>\n<p>React is a low level library and they want to keep it that way, not providing you with a tool like <code class=\"language-text\">ember-cli</code> for generating/running/deploying the app is a bit frustrating, but honestly giving you the option to choose whatever you want gives you a lot of possibilities like using cutting edge transpilers for using ES7 with react or honestly anything you could ever think of.</p>\n<p>Our module loader/bundler + transpiler will be <a href=\"https://webpack.github.io/\">webpack</a> + <a href=\"https://babeljs.io/\">babel</a></p>\n<h4>Initialize the Application</h4>\n<p>first install <code class=\"language-text\">webpack</code> globally by running\n<code class=\"language-text\">npm install -g webpack</code></p>\n<p>To create a new react application, create a new folder and run the following commands</p>\n<ul>\n<li><code class=\"language-text\">npm init</code></li>\n<li>npm install the following list</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;dependencies&quot;: {\n    &quot;babel-loader&quot;: &quot;^6.2.0&quot;,\n    &quot;babel-plugin-add-module-exports&quot;: &quot;^0.1.2&quot;,\n    &quot;babel-plugin-react-html-attrs&quot;: &quot;^2.0.0&quot;,\n    &quot;babel-plugin-transform-class-properties&quot;: &quot;^6.3.13&quot;,\n    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,\n    &quot;babel-preset-es2015&quot;: &quot;^6.3.13&quot;,\n    &quot;babel-preset-react&quot;: &quot;^6.3.13&quot;,\n    &quot;babel-preset-stage-0&quot;: &quot;^6.3.13&quot;,\n    &quot;react&quot;: &quot;^0.14.6&quot;,\n    &quot;react-dom&quot;: &quot;^0.14.6&quot;,\n    &quot;webpack&quot;: &quot;^1.12.9&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;\n  },</code></pre></div>\n<p>let me explain some of the packages introduced in the list above</p>\n<p><a href=\"https://webpack.github.io/docs/webpack-dev-server.html\">wepack-dev-server</a>: a tool for running <code class=\"language-text\">webpack</code> command in watch mode so whenever any file is changed the compilation happens and fires up a localhost server that serves all the files</p>\n<p><a href=\"https://github.com/facebook/react\">react|react-dom</a> after <code class=\"language-text\">react-native</code> was introduced, the react team figured out the need for extracting a single library that will be used everywhere and created a web specific library that handles the dom aspect of the web, which is now <code class=\"language-text\">react-dom</code></p>\n<p><strong>babel presets</strong>: presets are bunch of plugins associated together, like <code class=\"language-text\">es2015</code> allows the user to write <code class=\"language-text\">ES6</code>, <code class=\"language-text\">react</code> allows you to write <code class=\"language-text\">jsx</code> and <code class=\"language-text\">stage-0</code> allows the user to write all cutting edge <code class=\"language-text\">ES7</code> stuff</p>\n<hr>\n<h4>Configure webpack</h4>\n<p>create a new <code class=\"language-text\">./webpack.config.js</code> that contains the following</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> debug <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span>\n<span class=\"token keyword\">var</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token operator\">:</span> debug <span class=\"token operator\">?</span> <span class=\"token string\">'inline-sourcemap'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./js/app.js'</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    loaders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(node_modules|bower_components)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'es2015'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stage-0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'react-html-attrs'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'transform-class-properties'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'transform-decorators-legacy'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/src/'</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'app.min.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> debug\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>DedupePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>OccurenceOrderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          mangle<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          sourcemap<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The two interesting properties here are:</p>\n<ul>\n<li><code class=\"language-text\">entry</code>: which will be our entry point to the app the first script that runs, and through it, loads the rest of the app</li>\n<li><code class=\"language-text\">output</code>: this is the result when running webpack, this will be referenced in <code class=\"language-text\">index.html</code> that we will create bellow</li>\n</ul>\n<p>this is a pretty basic webpack config that checks the env, if its production will optimize the code by uglifying it and removing duplicate code and sourcemaps.</p>\n<p>There is a concepts in <code class=\"language-text\">webpack</code> <em>(actually <code class=\"language-text\">babel</code>)</em> which is called <a href=\"https://github.com/babel/babel-loader\">loaders</a> through them we can write <em>(ES6, ES7, JSX, …)</em>, and it will compile all that to <code class=\"language-text\">ES5</code> and will run on all browsers, take a look at the previous link for more info</p>\n<blockquote>\n<p>Note <code class=\"language-text\">webpack</code> is not exclusive for react, its recommended using it or any other build system (<code class=\"language-text\">Grunt</code>, <code class=\"language-text\">Gulp</code>, ..) for any Javascript application</p>\n</blockquote>\n<p> </p>\n<blockquote>\n<p>Note by using <code class=\"language-text\">webpack</code> you will install most of the dependencies from <code class=\"language-text\">npm</code> not <code class=\"language-text\">bower</code> and you <strong>can</strong> reference it from the code, <code class=\"language-text\">webpack</code> will figure how to handle all that for you <em>(and yes <code class=\"language-text\">npm</code> is also a good package manager for the web)</em></p>\n</blockquote>\n<p>At this point we are done with creating our small build system, its a little effort at first, but it makes our life so much easier, specially when the project grows</p>\n<hr>\n<h4>Cool tip on running your app</h4>\n<p>One of the dependencies for our app is <code class=\"language-text\">webpack-dev-server</code>, you could start the app by running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack-dev-server</code></pre></div>\n<p>This will actually not work, we need to tell it the base of our app is inside <code class=\"language-text\">src</code>, so we would run it with the following instead</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webpack-dev-server --content-base src</code></pre></div>\n<p>Instead of doing this every time that we would want to run our app, we could add a command in <code class=\"language-text\">scripts</code> in our <code class=\"language-text\">package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;dependencies&quot;: {\n    ...\n  },\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;./node_modules/.bin/webpack-dev-server --content-base src --inline --hot&quot;,\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },</code></pre></div>\n<p>We are passing two extra flags</p>\n<ul>\n<li><code class=\"language-text\">--inline</code>: this will not show a status bar at the top (shows by default)</li>\n<li><code class=\"language-text\">--hot</code> this enables hot module replacement, awesome feature, instead of refreshing the whole page, it just replaces the components that was edited, read more about it <a href=\"https://webpack.github.io/docs/hot-module-replacement-with-webpack.html\">here</a></li>\n</ul>\n<p>Now whenever we want to run the app we would type <code class=\"language-text\">npm run dev</code></p>\n<hr>\n<h4>Basic App Structure</h4>\n<p>our directory structure should look like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; node_modules/\n&gt; src/\n   &gt; js/\n     - app.js\n     &gt; components/\n       - Hello-World.js\n   - index.html\n- package.json\n- webpack.config.js</code></pre></div>\n<hr>\n<p><code class=\"language-text\">./index.html</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Learning React Series&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;app.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>This is just blank html boilerplate, the only interesting part that we are referencing <code class=\"language-text\">app.min.js</code> <em>(that we specified in the <code class=\"language-text\">webpack.config.js</code>)</em></p>\n<hr>\n<p><code class=\"language-text\">./js/app.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n\n<span class=\"token keyword\">import</span> HelloWorld <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Hello-World'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HelloWorld <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span></code></pre></div>\n<p>pretty basic file, just renders the <code class=\"language-text\">Hello-World</code> component</p>\n<hr>\n<p><code class=\"language-text\">./js/components/Hello-World.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'Extra Message from React'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A really simple <code class=\"language-text\">react</code> component, just renders</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">Hello Message\nExtra Message from React</code></pre></div>\n<p>That’s it in my next article will be talking about react basics and what is <code class=\"language-text\">DDAU</code> <em>(Data down action up)</em>, until next time, have an awesome day</p>","frontmatter":{"title":"Learning React: #1 Setting up the environment","date":"February 04, 2016","description":null}},"previous":{"fields":{"slug":"/2014-10-20---easy-javascript-plugin-development-using-gulpjs/"},"frontmatter":{"title":"Easy Javascript plugin development using gulpjs"}},"next":{"fields":{"slug":"/2016-08-07---why-i-switched-from-vim-to-emacs-with-evil-mode/"},"frontmatter":{"title":"Why I switched from vim to emacs + evil mode"}}},"pageContext":{"id":"292eb9a3-1708-5960-a614-02e6c80fb347","previousPostId":"de856d92-fad8-5ed0-b727-2c7f1d731983","nextPostId":"a81cb7c0-df17-59ac-ae16-137f0f3209e9"}},"staticQueryHashes":["2841359383","48398127"]}
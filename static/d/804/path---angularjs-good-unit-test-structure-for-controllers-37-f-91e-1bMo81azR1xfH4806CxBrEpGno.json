{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr","author":"Nadeem Khedr"}},"markdownRemark":{"id":"0c26ffc4-1f65-59e0-acac-5a4053079d16","excerpt":"The poorly the structure for unit testing the more and more complected it will take to write more unit tests for a simple functioning piece of code, in the end…","html":"<p>The poorly the structure for unit testing the more and more complected it will take to write more unit tests for a simple functioning piece of code, in the end it will feel that your fighting your way against testing, instead it should feel more fun! So I’ll be showing a structure that worked for me very well when working with angular controllers Before going deep with the structure, i’ll be using</p>\n<ul>\n<li>Jasmine <em>(unit testing)</em></li>\n<li>Jasmine spies <em>(mocking)</em></li>\n<li>karma <em>(because its awesome)</em></li>\n</ul>\n<h2>Don’t instantiate your controller in the beforeEach <em>(almost all the time)</em></h2>\n<p>This is by far point number one, because by doing so, you’ll loose so much power in mocking the dependencies that are used when the controller load in your unit test, you will have to write all that code in the <code class=\"language-text\">beforeEach</code> before instantiating the controller <em>(where its not where it should be, because it will be specific for each unit tests)</em> If you tried to do that, the <code class=\"language-text\">beforeEach</code> will be the only place to mock out all the dependencies for all the unit tests, because you can’t mock or inject a specific value for any of the dependencies in any of the unit tests, it will be too late the controller will already be instantiated</p>\n<h4>Example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Controller: UsersCtrl'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> controllerFactory<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">,</span> mockApi<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">controllerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UsersCtrl'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      $scope<span class=\"token punctuation\">:</span> scope<span class=\"token punctuation\">,</span>\n      api<span class=\"token punctuation\">:</span> mockApi\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Load the module that the controller you are testing is in</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyApp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// inject is used for resolving references that you need to</span>\n  <span class=\"token comment\">// use in your tests, don’t use this as a normal beforeEach,</span>\n  <span class=\"token comment\">// this beforeEach is used to resolve references</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$controller<span class=\"token punctuation\">,</span> $rootScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scope <span class=\"token operator\">=</span> $rootScope<span class=\"token punctuation\">.</span>$<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//instead of instantiating the controller using $controller</span>\n    <span class=\"token comment\">//we are saving a reference for it &amp; calling it in the</span>\n    <span class=\"token comment\">//createController function and later will use in each unit test</span>\n\n    controllerFactory <span class=\"token operator\">=</span> $controller<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//The actual before each for setting up common</span>\n  <span class=\"token comment\">//variables, dependencies or functions</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mockApi <span class=\"token operator\">=</span> …<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//Actual test</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'controller when load should call api.users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockApi<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To note from the example above there is three <code class=\"language-text\">beforeEach</code></p>\n<ol>\n<li>One for specifying the module to be loaded</li>\n<li>Second using angular.mock.inject to inject dependencies that would be used in the unit tests</li>\n<li>Third for initialize common functionality that will be used in the unit tests</li>\n</ol>\n<p>I really want to separate between the second and the third one, don’t like to merge both of them into one <code class=\"language-text\">beforeEach</code>. The reason is that I like to separate the responsibilities in each <code class=\"language-text\">beforeEach</code> that makes the code cleaner for me</p>\n<h3>Note on inject</h3>\n<p><code class=\"language-text\">inject()</code> is defined in <code class=\"language-text\">angular.mock.inject()</code>for ease of use its defined also in the global <code class=\"language-text\">window</code> object its in angular.mock.js , so its only used in testing environment the note about the inject its that the <em>injector unwraps the underscores (_) from around the parameter names when matching</em></p>\n<p>Why would that be useful ?</p>\n<p>The problem is that we would, most likely  want the variable to have the same name of the reference, if we did that we would have a problem, since the parameter to the <code class=\"language-text\">inject()</code> function would hide the outer variable. To help with this, the injected parameters can, optionally, be enclosed with underscores. These are ignored by the injector when the reference name is resolved.</p>\n<h4>Example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>_$compile_<span class=\"token punctuation\">,</span> _$rootScope_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The injector unwraps the underscores (_) from around the parameter names when matching</span>\n  $compile <span class=\"token operator\">=</span> _$compile_<span class=\"token punctuation\">;</span>\n  $rootScope <span class=\"token operator\">=</span> _$rootScope_<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Promises &#x26; ajax requests and how to mock them</h2>\n<p>Angular implements a promise/deferred pattern for its ajax stuff, any ajax request will return a promise, also you can create a new promise using the <a href=\"http://docs.angularjs.org/api/ng.$q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">$q service</a></p>\n<h4>What’s a promise ?</h4>\n<p>That’s a big talk in it self, in summary we always love the idea of chaining method calls, but that’s not possible in the async world, we have to write our code in the callback functions of each async action, that’s not fun when there is multiple async actions happening or if you want for example to fire an action if the two previous async actions where successful and another one regardless if the request where successful or failure, you get the idea it get pretty complected pretty fast</p>\n<p>A basic promise introduces a <code class=\"language-text\">then(successFn, failFn)</code> of any async object</p>\n<h4>Example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> requestPromise <span class=\"token operator\">=</span> $http<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequestPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//do stuff</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>in the example above the <code class=\"language-text\">$http.get()</code> returns a promise, after we made the request we then called <code class=\"language-text\">then()</code> and passed it its first argument as the function to trigger if the request was successful and ignored the second parameter <em>(don’t want to do anything if the request was failure)</em></p>\n<h4>How would we mock that?</h4>\n<p>If you want to use the <code class=\"language-text\">$http</code> directly inside the controller you can read about <a href=\"http://docs.angularjs.org/api/ngMock.$httpBackend\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">$httpBackend</a></p>\n<p>what I prefer is to put all the ajax code inside external services <em>(or in the resolve function of the router)</em> and call these services from the controller, and then for testing i can mock the object itself and I won’t get into the hassle of using <code class=\"language-text\">$httpBackend</code></p>\n<h4>Example:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span>‘MyApp’<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>‘api’<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      users<span class=\"token punctuation\">:</span> $http<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>‘<span class=\"token operator\">/</span>users’<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span>‘UsersCtrl’<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> anotherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    api<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      anotherService<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We want to test when the <code class=\"language-text\">api.users()</code> is successful, <code class=\"language-text\">anotherService.doSomething()</code> will be called with the data returned from api.users()</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>‘Controller<span class=\"token punctuation\">:</span> UsersCtrl’<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> controllerFactory<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">,</span> $q<span class=\"token punctuation\">,</span> mockApi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> anotherService <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> usersData<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">controllerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UsersCtrl'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      $scope<span class=\"token punctuation\">:</span> scope<span class=\"token punctuation\">,</span>\n      api<span class=\"token punctuation\">:</span> mockApi<span class=\"token punctuation\">,</span>\n      anotherService<span class=\"token punctuation\">:</span> anotherService\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Load the module that the controller you are testing is in</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyApp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$controller<span class=\"token punctuation\">,</span> $rootScope<span class=\"token punctuation\">,</span> _$q_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scope <span class=\"token operator\">=</span> $rootScope<span class=\"token punctuation\">.</span>$<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    controllerFactory <span class=\"token operator\">=</span> $controller<span class=\"token punctuation\">;</span>\n    $q <span class=\"token operator\">=</span> _$q_<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//The actual before each for setting up common variables, dependencies or functions</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mockApi<span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">createSpy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    anotherService<span class=\"token punctuation\">.</span>doSomething <span class=\"token operator\">=</span> jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">createSpy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doSomething'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//this will be the return type of the api.users, it will return a promise</span>\n    <span class=\"token keyword\">var</span> usersDefer <span class=\"token operator\">=</span> $q<span class=\"token punctuation\">.</span><span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//resolve on a defer and passing it data, will always run</span>\n    <span class=\"token comment\">//the first argument of the then() if you want to test</span>\n    <span class=\"token comment\">//the second one, write reject() instead.</span>\n    <span class=\"token comment\">//but here by default we want to resolve it and pass it</span>\n    <span class=\"token comment\">//an empty object that we can change it’s value in any unit test</span>\n    usersDefer<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>usersData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//defer.promise is actually the object that has the then() method</span>\n    mockApi<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span>usersDefer<span class=\"token punctuation\">.</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//Actual test</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>‘controller when load should call api<span class=\"token punctuation\">.</span>users’<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    usersData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Joe'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//scope.$digest() will fire watchers on current scope,</span>\n    <span class=\"token comment\">//in short will run the callback function in the</span>\n    <span class=\"token comment\">//controller that will call anotherService.doSomething</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token function\">$digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>anotherService<span class=\"token punctuation\">.</span>doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span>usersData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This article</a> explains <code class=\"language-text\">$digest</code> &#x26; <code class=\"language-text\">$apply</code> more indepth</p>","frontmatter":{"title":"AngularJs Good Unit Test Structure For Controllers & How to test ajax code and Promises","date":"October 18, 2013"}}},"pageContext":{"slug":"angularjs-good-unit-test-structure-for-controllers/","previous":{"fields":{"slug":"angularjs-validation-reusable-component/"},"frontmatter":{"title":"AngularJs Validation Make A Reusable Component"}},"next":{"fields":{"slug":"how-to-do-authorization-and-role-based-permissions-in-angularjs/"},"frontmatter":{"title":"How to do Authorization and Role  based permissions in AngularJs"}}}}
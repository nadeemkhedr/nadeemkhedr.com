{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"e25655cd-54ab-5dc2-94e9-98288eef6c4d","excerpt":"There are plenty of articles that target how to write custom rules to the jquery.validate plugin but very few targets how this plugin internally works and that…","html":"<p>There are plenty of articles that target how to write custom rules to the jquery.validate plugin but very few targets how this plugin internally works and that’s what we will discuss in this article</p>\n<p>this is part of “<strong><em>understanding Asp.net Mvc Unobtrusive Validatio</em>n</strong>” series</p>\n<ol>\n<li>How the jQuery validate plugin works internally</li>\n<li><a href=\"/understand-the-html-generated-by-the-unobtrusive-validation-in-asp-net-mvc/\">Understand the Html generated by the unobtrusive validation in Asp.net MVC</a></li>\n<li><a href=\"/how-the-unobtrusive-jquery-validate-plugin-works-internally-in-asp-net-mvc/\">How the unobtrusive jQuery validate plugin works internally in Asp.net MVC</a></li>\n</ol>\n<p>What we will be talking about in this article</p>\n<ul>\n<li>How to validate a form</li>\n<li>The validation messages and how they work</li>\n<li>Add custom validation rules</li>\n<li>What exactly happens when we call the validate method</li>\n</ul>\n<h1>How to validate a form ?</h1>\n<p>There are basically 2 ways to validate your form</p>\n<h2>1- Use Class names as rules</h2>\n<p>How it works</p>\n<p>We decorate the fields that we want to validate with an html <em>class</em> attribute and that is what will trigger the validation</p>\n<p>So if we want a textbox to be required we add to that input element a class value of <code class=\"language-text\">required</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>‘form’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this method you can define certain classes with multiple rules</p>\n<p>Pros &#x26; cons of this approach</p>\n<ul>\n<li>only works with rules that takes no arguments</li>\n<li>we are using the html <em>class</em> attribute for something not related to its original intent which is a break for separation of concerns principle</li>\n<li>but still it’s very easy to setup</li>\n</ul>\n<h2>Using <em>addClassRules</em> method</h2>\n<p>Using <em>addClassRules</em> function gives us the ability to use compound rules as a single class</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">addClassRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  zip<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    digits<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    maxlength<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will add 2 new class rules, <code class=\"language-text\">name</code> and <code class=\"language-text\">zip</code> so if we have an input element and gave it a <strong>class</strong> of <code class=\"language-text\">zip</code> it will be <strong>required</strong>, the user must only insert digits and the length must be exactly 5 characters</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zip<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zipCode<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><strong>Note:</strong> to use a custom message for a specific rule in a compound class rules requires a workaround, you have to alias the rules like <code class=\"language-text\">required</code> to a new rule and in the new rule you define a default message</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newrequired\"</span><span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new name is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or you can use the <code class=\"language-text\">title</code> html attribute and it will be the error message for the compound rule</p>\n<blockquote>\n<p>class names validation only works on the validation rules that doesn’t accept any arguments</p>\n</blockquote>\n<h2>2- Add rules as JSON object to the validate method</h2>\n<p>by the name you should have figured out that the validation method takes a json object, we then could specify the fields that we want to validate and the validation rules for it</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>something<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userEmail<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>‘form’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    userEmail<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      email<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>when you pass the rules object to the validate function the key should be the value of the <code class=\"language-text\">name</code> attribute not the value of the <code class=\"language-text\">id</code> as you can see in the example the key is <code class=\"language-text\">userEmail</code> which is the value of the name attribute and the <code class=\"language-text\">id</code> is something else</p>\n</blockquote>\n<p>Pros &#x26; cons of this approach</p>\n<ul>\n<li>this approach will give us the ability to use more validation rules that require arguments like <em>minlength</em>, <em>remote</em>, <em>equalTo</em> , etc..</li>\n<li>great and manual control over everything</li>\n<li>but the user have to make a separate validate function with different options for every form</li>\n</ul>\n<h2>Adding or removing dynamic rules</h2>\n<h4>Adding rules</h4>\n<p>To add a rule we should use the <em>rules</em> method on a <em>jquery</em> elements itself after the form is validated and pass the first parameter the string <code class=\"language-text\">add</code> and the second one an <code class=\"language-text\">object</code> of rules you want to add for this element (you can also pass a message object for the rules you added)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Removing rules</h4>\n<p>if you want to remove a rule or set of rules you pass the string <code class=\"language-text\">remove</code> as the first parameter for the rules method then the second will be a <code class=\"language-text\">string</code> that containing the rules you want to remove separated by a space</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'min max'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>More manual approach</h3>\n<p>accessing the <strong>validator</strong> object after the form is validated and from it access the <strong>rules</strong> object and then we can extend or modify it</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'validator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvalidator<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>objectName <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>this approach is very useful if you have an already made rules or messages objects you could extend the rules of the <code class=\"language-text\">validator</code> with your own</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> rules<span class=\"token punctuation\">:</span> rules<span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">:</span> messages <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>to understand the <code class=\"language-text\">validator</code> you can check What exactly happens when we call the validate method section</p>\n</blockquote>\n<hr>\n<h1>The validation messages and how they work.</h1>\n<p>There are 3 ways to provide a validation message</p>\n<ul>\n<li>pass a <code class=\"language-text\">messages</code> object to the <code class=\"language-text\">validate</code> method the messages <code class=\"language-text\">object</code> consist of key/value pairs the <strong>key</strong> is the name of the element and the <strong>value</strong> is an object containing every rule and its message</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    userEmail<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      email<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    userEmail<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Please enter your email\"</span><span class=\"token punctuation\">,</span>\n      required<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>The value of the <code class=\"language-text\">title</code> attribute on the element</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>you have to enter a value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>default message when defining the validation rule and there are built in default messages for the built in rules</li>\n</ul>\n<blockquote>\n<p>These 3 ways override each other based on the priority, passing the messages object is the most important and the default message is the least important</p>\n</blockquote>\n<hr>\n<h1>Add custom validation rules.</h1>\n<p>When we want to add more validation rules than the default ones we use <code class=\"language-text\">$.validator.addMethod</code></p>\n<p>this method accepts as parameters the following</p>\n<ul>\n<li>rule name</li>\n<li>a function that do the validation</li>\n<li>a default message</li>\n</ul>\n<p>the function that do the validation can be in 2 different signatures</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> function validationMethod (value, element)\n // OR\n function validationMethod (value, element, params)</code></pre></div>\n<p>lets explain these parameters</p>\n<ul>\n<li>value: the value of the DOM element that will be validated</li>\n<li>element: the DOM element itself</li>\n<li>params : is what you pass as a value to this validation ruleExample what <code class=\"language-text\">params</code>will equal</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    firstname<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      compare<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'notequal'</span><span class=\"token punctuation\">,</span>\n        otherprop<span class=\"token punctuation\">:</span> <span class=\"token string\">'lastname'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> in this example the <code class=\"language-text\">params</code> will equal to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{type:&quot;notequal&quot;, otherprop: &quot;lastname&quot;}</code></pre></div>\n<p>Example to add custom rule</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notnumbers\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token regex\">/[0-9]*/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please don’t insert numbers.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1>What exactly happens when we call the <em>validate</em> method.</h1>\n<p>When you call <code class=\"language-text\">validate</code> on a form mainly couple of things happens behind the scene</p>\n<ul>\n<li>\n<p><strong>Create a <code class=\"language-text\">validator</code> object with all the rules and options and attach it to the form.</strong></p>\n</li>\n<li>\n<p>The <em>validate</em> method attaches the <em>validator</em> using <em>$.data</em> , you can get it by selecting the form and calling the <em>jquery $.data</em> function and passing it <code class=\"language-text\">validator</code>. The <code class=\"language-text\">validator</code> object is all the metadata for the validation giving us the ability to access the validate options at anytime in the page cycle</p>\n</li>\n<li>\n<p>using this object you can change at <strong>runtime</strong> the options that you passed to the validate method like adding or removing rules, change what happens when the field is valid or invalid or even provide an ignore selector</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//getting the validator</span>\n<span class=\"token keyword\">var</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".selector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validator\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><em>Note:</em> when you call <code class=\"language-text\">validate</code> on a form that was already validated it will just return the <em>validator</em> object using also <em>$.data</em> and all the options passed to validate method will be omitted</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".selector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* rules will be omitted */</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p><strong>subscribe events to the form itself</strong></p>\n</li>\n<li>\n<p>What will happens when you click submit and there are invalid elements is you will trigger the validation of the fields, if one of them is not valid then the validate plugin will listen to it more closely to check if it is valid or not The events that are subscribed to the form are click, focusin, focusout, keyup, submit</p>\n<blockquote>\n<p>you can disable these events by passing them as keys to the validate method and false as their value</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".selector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  onfocusout<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onkeyup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onclick<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onsubmit<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>See also:</p>\n<ul>\n<li><a href=\"http://docs.jquery.com/Plugins/Validation/validate#toptions\" title=\"official jquery.validate options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official jQuery.validate options</a></li>\n<li><a href=\"http://khaidoan.wikidot.com/jquery-validation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Q&#x26;A on how jQuery.validate works</a></li>\n<li><a href=\"http://docs.jquery.com/Plugins/Validation#List_of_built-in_Validation_methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">List of the built-in validation methods </a></li>\n</ul>","frontmatter":{"title":"How the jQuery validate plugin works internally","date":"August 12, 2012"}}},"pageContext":{"slug":"how-the-jquery-validate-plugin-works-internally/","previous":null,"next":{"fields":{"slug":"understand-the-html-generated-by-the-unobtrusive-validation-in-asp-net-mvc/"},"frontmatter":{"title":"Understand the Html generated by the unobtrusive validation in Asp.net MVC"}}}}
{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr","author":"Nadeem Khedr"}},"markdownRemark":{"id":"4cde1434-9144-5a15-a1c5-a4d0c62be464","excerpt":"this is part of “ understanding Asp.net Mvc Unobtrusive Validatio n ” series How the jQuery validate plugin works internally Understand the Html generated by…","html":"<p>this is part of “<strong><em>understanding Asp.net Mvc Unobtrusive Validatio</em>n</strong>” series</p>\n<ol>\n<li><a href=\"/how-the-jquery-validate-plugin-works-internally/\">How the jQuery validate plugin works internally</a></li>\n<li><a href=\"/understand-the-html-generated-by-the-unobtrusive-validation-in-asp-net-mvc/\">Understand the Html generated by the unobtrusive validation in Asp.net MVC</a></li>\n<li>How the unobtrusive jQuery validate plugin works internally in Asp.net MVC</li>\n</ol>\n<p>What we will be talking about in this article</p>\n<ul>\n<li>The <code class=\"language-text\">parse</code> method</li>\n<li><code class=\"language-text\">parseElement</code> section</li>\n<li><code class=\"language-text\">skipAttach</code> parameter explanation</li>\n<li><code class=\"language-text\">parseElement</code> function explanation</li>\n<li><code class=\"language-text\">validateInfo</code> section]</li>\n<li><code class=\"language-text\">validateInfo</code> function explanation</li>\n<li>The return object explanation</li>\n<li>Adapters</li>\n</ul>\n<h2><em>parse()</em> method</h2>\n<p>we will explain the cycle of whats happening in the unobtrusive validation at the document load and will understand what is the role of every component</p>\n<p>if we look at the end of the <code class=\"language-text\">jquery.validate.unobtrusive.js</code> we will find</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $jQval<span class=\"token punctuation\">.</span>unobtrusive<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>so we called the <code class=\"language-text\">parse()</code> method and pass it <code class=\"language-text\">document</code></p>\n<p>so whats the parse method exactly</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  parse<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token operator\">&lt;</span>summary<span class=\"token operator\">></span>\n    <span class=\"token comment\">/// Parses all the HTML elements in the specified selector. It looks for input elements decorated</span>\n    <span class=\"token comment\">/// with the [data-val=true] attribute value and enables validation according to the data-val-*</span>\n    <span class=\"token comment\">/// attribute values.</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">///Any valid jQuery selector.</span>\n\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":input[data-val=true]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      $jQval<span class=\"token punctuation\">.</span>unobtrusive<span class=\"token punctuation\">.</span><span class=\"token function\">parseElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> $forms <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">parents</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">andSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    $forms<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> <span class=\"token function\">validationInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        info<span class=\"token punctuation\">.</span><span class=\"token function\">attachValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is two sections in the parse method</p>\n<h3>1- <em>parseElement()</em> section</h3>\n<p><code class=\"language-text\">parseElement(element, skipAttach)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":input[data-val=true]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $jQval<span class=\"token punctuation\">.</span>unobtrusive<span class=\"token punctuation\">.</span><span class=\"token function\">parseElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>so the first thing that happens we iterate over all the elements that have a data-val=true inside the selector that we passed <em>(its document in our case)</em></p>\n<p>then call <code class=\"language-text\">parseElement()</code> and pass it the element we want to validate and <code class=\"language-text\">true</code> for <code class=\"language-text\">skipAttach</code></p>\n<h4><em>skipAttach()</em> parameter explanation</h4>\n<p>a question could come up why we passed <code class=\"language-text\">true</code> to <code class=\"language-text\">skipAttach</code> and not <code class=\"language-text\">false</code></p>\n<p><code class=\"language-text\">skipAttach</code> is a flag for calling <code class=\"language-text\">validate()</code> on the form</p>\n<p>If we passed <code class=\"language-text\">false</code> it will translate the rules on the element that we have passed then immediately call validate on the rules array and pass along other options used by the unobtrusive validation. <em>(if there is still other element to be parsed they wont)</em></p>\n<p>We don’t want that. We first want to translate <strong>all</strong> the rules on every element in the form then after all the rules are translated we will call <code class=\"language-text\">validate()</code> which is basically the second part of the parse method</p>\n<p>So what other scenarios we would pass <code class=\"language-text\">true</code> to <code class=\"language-text\">skipAttach</code> ?</p>\n<p>If we want to add dynamic element to an already validated form we will pass true to skip validating the form again because it won’t do anything <em>(we will talk about dynamic validating element in the next article)</em></p>\n<h4><em>parseElement()</em> function</h4>\n<p>The <code class=\"language-text\">parseElement()</code> does mainly two things</p>\n<ol>\n<li>On the first call on an element in a form <em>(No element was called before it in the same form)</em></li>\n</ol>\n<p> it will construct an object of options that will be passed to the <code class=\"language-text\">validate()</code> method, the options are used by the <code class=\"language-text\">jquery.unobtrusive</code> like custom <code class=\"language-text\">errorPlacement</code> function, custom <code class=\"language-text\">errorClass</code> and an empty rules array</p>\n<blockquote>\n<p>Note: what is responsible of doing all that is a private method called <code class=\"language-text\">validationInfo(form)</code> that is called within <code class=\"language-text\">parseElement</code> and when its called more than 1 time it will just return the same object so we can add, modify or call data/functions in it</p>\n</blockquote>\n<ol start=\"2\">\n<li>For every element when we call <code class=\"language-text\">parseElement</code> it will understand the rules that are written on this element (the <code class=\"language-text\">data-*</code>) using the <code class=\"language-text\">adapters</code> <em>(Will explain later how the adapters works)</em> and then translate and add them to the rules array that was constructed in the first call</li>\n</ol>\n<blockquote>\n<p>every call to <code class=\"language-text\">parseElement</code> its result will be saved on the form itself using <code class=\"language-text\">$.data(“unobtrusiveValidation“)</code> that’s how the separate calls sync in the same data source</p>\n</blockquote>\n<h3>2- <em>validateInfo()</em> section</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> $forms <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">parents</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">andSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$forms<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> <span class=\"token function\">validationInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">.</span><span class=\"token function\">attachValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4><em>validateInfo()</em> function explanation</h4>\n<p>we already said calling <code class=\"language-text\">validateInfo()</code> will construct an object of options for the <code class=\"language-text\">validate()</code> method, the options are used by the <code class=\"language-text\">jquery.unobtrusive</code> like a custom <code class=\"language-text\">errorPlacement</code> function, custom <code class=\"language-text\">errorClass</code> and an empty rules array</p>\n<p>here we also called <code class=\"language-text\">validationInfo()</code> for every form in the page  basically at this point calling <code class=\"language-text\">validationInfo()</code> we will only get the object stored on the form that was already populated in the first phase so we are using it as a getter</p>\n<p>after that we are calling <code class=\"language-text\">attachValidation()</code> which is basically calling the <code class=\"language-text\">validate()</code> method passing it all the options populated by the <code class=\"language-text\">validationInfo()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">data_validation <span class=\"token operator\">=</span> <span class=\"token string\">\"unobtrusiveValidation\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validationInfo</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> $form <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    result <span class=\"token operator\">=</span> $form<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data_validation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    onResetProxy <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>onReset<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// options structure passed to jQuery Validate’s validate() method</span>\n        errorClass<span class=\"token punctuation\">:</span> <span class=\"token string\">\"input-validation-error\"</span><span class=\"token punctuation\">,</span>\n        errorElement<span class=\"token punctuation\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n        errorPlacement<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>onError<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        invalidHandler<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>onErrors<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        success<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>onSuccess<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      attachValidation<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        $form\n          <span class=\"token punctuation\">.</span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reset.\"</span> <span class=\"token operator\">+</span> data_validation<span class=\"token punctuation\">,</span> onResetProxy<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reset.\"</span> <span class=\"token operator\">+</span> data_validation<span class=\"token punctuation\">,</span> onResetProxy<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      validate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// a validation function that is called by unobtrusive Ajax</span>\n        $form<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> $form<span class=\"token punctuation\">.</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    $form<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data_validation<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>first we are checking if we already called this function on the form before by using <code class=\"language-text\">$form.data(“unobtrusiveValidation“)</code> if we did then do nothing and return the result</p>\n<h4>The return object explanation</h4>\n<p>If its the first time we call <code class=\"language-text\">validationInfo()</code> then we construct a result object and will save it on the form using <code class=\"language-text\">$.data()</code> method this object will contain 3 parts:</p>\n<ul>\n<li>An object which is the basically all the options that we will pass to the <code class=\"language-text\">validate()</code> method with an empty rules &#x26; messages arrays that will be constructed later</li>\n<li><code class=\"language-text\">attachValidation()</code> method will bind a custom event to the form itself <code class=\"language-text\">“reset.unobtrusiveValidation”</code> and after call validate on the method with all the options , this method will be called when the rules &#x26; messages arrays are completed  (triggering the custom <code class=\"language-text\">&quot;reset&quot;</code> event will call <code class=\"language-text\">onReset()</code> method which will basically resets everything)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ‘this’ is the form element</span>\n  <span class=\"token keyword\">var</span> $form <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> $form<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $form<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".control-group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $form<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".validation-summary-errors\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validation-summary-valid\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validation-summary-errors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $form<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".field-validation-error\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field-validation-valid\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field-validation-error\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">removeData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unobtrusiveContainer\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">*\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// If we were using valmsg-replace, get the underlying error</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">removeData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unobtrusiveContainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so if we want to trigger the reset event to reset the form</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>‘form’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>‘reset<span class=\"token punctuation\">.</span>unobtrusiveValidation’<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>a custom <code class=\"language-text\">validate()</code> method that will be called from unobtrusive ajax</li>\n</ul>\n<h2>Adapters</h2>\n<p>I intentionally left the <code class=\"language-text\">adapters</code> section out when i talked about the <code class=\"language-text\">parseElement()</code> method because its complicated enough to be in a sub-section</p>\n<p>We looked at how Html is generated using unobtrusive validation and how to add custom validation attribute in normal <code class=\"language-text\">jquery.validate</code> what links the two is the <strong>Adapters</strong></p>\n<p><strong>So What is the adapter’s responsibility ?</strong></p>\n<p>it is responsible for translating the Html <code class=\"language-text\">data-*</code> to a format that can be understood by the normal <code class=\"language-text\">jquery.validate</code></p>\n<p>If a user want to add a custom validation method using the unobtrusive validation he must also provide an adapter for it</p>\n<p>the <code class=\"language-text\">adapters</code> collection resides in *<code class=\"language-text\">$.validator.unobtrusive.adapters</code></p>\n<ul>\n<li>the <code class=\"language-text\">adapters</code> collection consist of all the default adapters defined by default in <code class=\"language-text\">jquery.unobstrusive</code> and the ones that the user has defined</li>\n<li>It also contains 4 methods for adding custom adapters that we will take a look at later</li>\n</ul>\n<p>so lets look at the most generic method which is</p>\n<p><code class=\"language-text\">jQuery.validator.unobtrusive.adapters.add(adapterName, [params], fn)</code></p>\n<p>you can consider this method the <code class=\"language-text\">$.ajax</code> method and the other three are helper methods that uses it</p>\n<p>so lets explain the parameters</p>\n<ul>\n<li>\n<p><code class=\"language-text\">adapterName</code>: is the adapter name as the name implies , and it matches the <em>ruleName</em> in the Html element <code class=\"language-text\">data-val-ruleName</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">[params]</code>: an optional parameter array that the validation method would use to complete validation</p>\n</li>\n<li>\n<p><code class=\"language-text\">fn</code>: Is called to map the Html <code class=\"language-text\">data-*</code> to rules and messages used by the <code class=\"language-text\">validate()</code> method and it has a parameter option passed to it which is an object containing the following properties:</p>\n</li>\n<li>\n<p><code class=\"language-text\">element</code>: the Html element being validated</p>\n</li>\n<li>\n<p><code class=\"language-text\">form</code>: the form element</p>\n</li>\n<li>\n<p><code class=\"language-text\">message</code>: the error message for this rule extracted from <code class=\"language-text\">data-*</code> attribute on the element</p>\n</li>\n<li>\n<p><code class=\"language-text\">params</code>: parameters that are used for the validation and its an array extracted from the <code class=\"language-text\">data-*</code> attributes on the Html element <code class=\"language-text\">data-val-ruleName-param1</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">rules</code>: The jquery rules array for this element , your expected to add to this array the rule(s) that this adapter is used for\nyou will pass key/value pairs</p>\n</li>\n<li>\n<p>the key is the validation rule name ,</p>\n</li>\n<li>\n<p>the value is the parameters used for this rule <em>(check this <a href=\"/2012/08/12/how-the-jquery-validate-plugin-works-internally/#goCustomRulesAdd\">section</a> in that article for adding custom rules to <code class=\"language-text\">jquery.validate</code>)</em></p>\n</li>\n<li>\n<p><code class=\"language-text\">messages</code>: The jquery messages array for this element, same as the rules object you are expected to fill it and its used as the messages object for this Html element in the validate method</p>\n</li>\n</ul>\n<blockquote>\n<p>There is no return result from the method. Whats happening manipulating the rules &#x26; messages arrays will directly be saved on the form itself using <code class=\"language-text\">$.data(“unobtrusiveValidation&quot;)</code> you can check the <code class=\"language-text\">parseElement</code> method for the details of how the parameter where passed to the adapter function</p>\n</blockquote>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>val<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>val<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-val</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-val-between</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Must be in the right range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-val-between-min</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-val-between-max</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//The adapter</span>\njQuery<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span>unobtrusive<span class=\"token punctuation\">.</span>adapters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n  ‘between’<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>‘min’ <span class=\"token punctuation\">,</span>’max’<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">[</span>‘between’<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      min<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">,</span>\n      max<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>max\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">[</span>‘between’<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//The validation method</span>\njQuery<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"between\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  params<span class=\"token punctuation\">.</span>min <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n  params<span class=\"token punctuation\">.</span>max <span class=\"token operator\">==</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>so what about the other adapters</p>\n<ul>\n<li><code class=\"language-text\">addBool</code></li>\n<li><code class=\"language-text\">addSingleVal</code></li>\n<li><code class=\"language-text\">addMinMax</code></li>\n</ul>\n<p>They are all pretty simple if you understood the concept of adding a custom adapter using the <code class=\"language-text\">add()</code> method explained before</p>\n<p>You can check Brad Wilson’s <a href=\"http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-validation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> he explained in it the adapters in depth</p>","frontmatter":{"title":"How the unobtrusive jQuery validate plugin works internally in Asp.net MVC","date":"August 27, 2012"}}},"pageContext":{"slug":"how-the-unobtrusive-jquery-validate-plugin-works-internally-in-asp-net-mvc/","previous":{"fields":{"slug":"understand-the-html-generated-by-the-unobtrusive-validation-in-asp-net-mvc/"},"frontmatter":{"title":"Understand the Html generated by the unobtrusive validation in Asp.net MVC"}},"next":{"fields":{"slug":"knockout-view-model-binding-variations-to-a-page/"},"frontmatter":{"title":"Knockout view model binding variations to a page"}}}}
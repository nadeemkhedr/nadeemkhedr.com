{"data":{"site":{"siteMetadata":{"title":"Nadeem Khedr","author":"Nadeem Khedr"}},"markdownRemark":{"id":"89af8d90-0fdb-5028-bf6d-7870ef853e58","excerpt":"Note: this article is going to be continuously updated, I’ll update this post the more I use emacs and find cool tips for it or find cool plugins I won’t go in…","html":"<blockquote>\n<p>Note: this article is going to be continuously updated, I’ll update this post the more I use emacs and find cool tips for it or find cool plugins</p>\n</blockquote>\n<p>I won’t go in-depth for actually how to get started with emacs and every little config, I’ll just point out some small details that made it easier to get started.</p>\n<h2>Basic Tips</h2>\n<ul>\n<li>install emacs and create <code class=\"language-text\">~/.emacs.d/init.el</code> that is the equivalent to <code class=\"language-text\">vimrc</code> file</li>\n<li>the best way to learn how emacs works, read the emacs configs for other smart people</li>\n<li>Its really important to not copy the whole config files, copy bit by bit and understand what each bit does</li>\n<li>\n<p>emacs has package manager built in</p>\n<ul>\n<li>its more like vim <code class=\"language-text\">pathogen</code> in the sense that the packages you have are not reflected in the config itself</li>\n<li>to get around that you install <code class=\"language-text\">use-package</code> if you pass it <code class=\"language-text\">:ensure t</code>, then it will install the package when emacs start (ex: <code class=\"language-text\">(use-package evil :ensure t)</code>)</li>\n<li>the package manager can be extended to use multiple sources when searching for packages, you need to do something like this at the top of the config</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(add-to-list &#39;package-archives &#39;(&quot;org&quot; . &quot;http://orgmode.org/elpa/&quot;))\n(add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;))\n(add-to-list &#39;package-archives &#39;(&quot;melpa-stable&quot; . &quot;http://stable.melpa.org/packages/&quot;))</code></pre></div>\n<hr>\n<h2>Plugin Specific Tips</h2>\n<h3>Neotree <a href=\"https://github.com/jaypei/emacs-neotree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a></h3>\n<p>neotree is the equivalent for NERDtree, here are some basic settings that I have for it</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package neotree\n  :ensure t\n  :config\n\n\t(evil-leader/set-key\n\t&quot;m&quot;  &#39;neotree-toggle\n\t&quot;n&quot;  &#39;neotree-project-dir)\n\n  (setq projectile-switch-project-action &#39;neotree-projectile-action)\n  (add-hook &#39;neotree-mode-hook\n    (lambda ()\n      (define-key evil-normal-state-local-map (kbd &quot;q&quot;) &#39;neotree-hide)\n      (define-key evil-normal-state-local-map (kbd &quot;I&quot;) &#39;neotree-hidden-file-toggle)\n      (define-key evil-normal-state-local-map (kbd &quot;z&quot;) &#39;neotree-stretch-toggle)\n      (define-key evil-normal-state-local-map (kbd &quot;R&quot;) &#39;neotree-refresh)\n      (define-key evil-normal-state-local-map (kbd &quot;m&quot;) &#39;neotree-rename-node)\n      (define-key evil-normal-state-local-map (kbd &quot;c&quot;) &#39;neotree-create-node)\n      (define-key evil-normal-state-local-map (kbd &quot;d&quot;) &#39;neotree-delete-node)\n\n      (define-key evil-normal-state-local-map (kbd &quot;s&quot;) &#39;neotree-enter-vertical-split)\n      (define-key evil-normal-state-local-map (kbd &quot;S&quot;) &#39;neotree-enter-horizontal-split)\n\n      (define-key evil-normal-state-local-map (kbd &quot;RET&quot;) &#39;neotree-enter))))</code></pre></div>\n<p>Most of the code here is self-explanatory, it just makes it work with evil binding and added some extra keys</p>\n<ul>\n<li><code class=\"language-text\">m</code> for move</li>\n<li><code class=\"language-text\">d</code> for delete</li>\n<li><code class=\"language-text\">c</code> for create</li>\n<li><code class=\"language-text\">z</code> for max/min neotree window</li>\n<li><code class=\"language-text\">I</code> toggle hidden files</li>\n<li><code class=\"language-text\">R</code> for refresh</li>\n<li><code class=\"language-text\">s</code> open in vsplit</li>\n<li><code class=\"language-text\">S</code> open in split</li>\n<li><code class=\"language-text\">&lt;leader&gt; m</code> toggle neotree</li>\n<li><code class=\"language-text\">&lt;leader&gt; n</code> open neotree and find current file in it</li>\n</ul>\n<blockquote>\n<p>Note: also there is a line related to <code class=\"language-text\">projectile</code> (will talk later about it) which basically refreshes neotree whenever you change projects</p>\n</blockquote>\n<blockquote>\n<p>Note: <code class=\"language-text\">&lt;leader&gt;</code> is added by another package <code class=\"language-text\">evil-leader</code> (will talk about it later)</p>\n</blockquote>\n<h5>Extra Tip</h5>\n<p>Add the following to the config</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package find-file-in-project :ensure t)\n\n(defun neotree-project-dir ()\n  &quot;Open NeoTree using the git root.&quot;\n  (interactive)\n  (let ((project-dir (ffip-project-root))\n        (file-name (buffer-file-name)))\n    (if project-dir\n        (progn\n        (neotree-dir project-dir)\n        (neotree-find file-name))\n    (message &quot;Could not find git project root.&quot;))))</code></pre></div>\n<p>So earlier I said <code class=\"language-text\">&lt;leader&gt; n</code> open the current file in <code class=\"language-text\">neotree</code>, the annoying part is if the file is in sub-folder, it opens the subfolder as the root, it doesn’t work like NERDTree (the root is always the git root)</p>\n<p>The lines added above is to do exactly that, it’s using another package called <code class=\"language-text\">find-file-in-project</code> and using its functionality to always specify the git root as the root when opening any file</p>\n<h3>company mode <a href=\"http://company-mode.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a></h3>\n<p>Company mode is a text completion framework, basically, it’s the implementation of how text is autocompleted and you could provide implementation of what are the complete options using custom plugins</p>\n<blockquote>\n<p>Note: you will find this theme a lot in emacs plugins, often plugins are isolated enough that they are able to communicate with other data sources, this only shows how well emacs and emacs plugin are written</p>\n</blockquote>\n<p>Check available <a href=\"https://github.com/company-mode/company-mode/wiki/Third-Party-Packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">3rd Party Packages</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package company\n  :ensure t\n  :config\n  (global-company-mode)\n  (setq company-idle-delay 0.2)\n  (setq company-selection-wrap-around t)\n  (define-key company-active-map [tab] &#39;company-complete)\n  (define-key company-active-map (kbd &quot;C-n&quot;) &#39;company-select-next)\n  (define-key company-active-map (kbd &quot;C-p&quot;) &#39;company-select-previous))</code></pre></div>\n<p>this is really basic, install and enable company mode globally then set idle time that user have to wait before the options appear, in our case its <code class=\"language-text\">0.2s</code></p>\n<p>we are also setting <code class=\"language-text\">company-selection-wrap-around</code> to true, this makes a previous/next selection in the popup cycles</p>\n<p>lastly, we define custom mapping keys</p>\n<ul>\n<li><code class=\"language-text\">c-n</code> and <code class=\"language-text\">c-p</code> for next and previous items</li>\n<li><code class=\"language-text\">tab</code> to auto complete</li>\n</ul>\n<h3>helm <a href=\"https://github.com/emacs-helm/helm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a></h3>\n<p>Helm is like <code class=\"language-text\">ctrl-p</code> a fuzzy finder for .. stuff\nokay .. that’s a lie, <code class=\"language-text\">Helm</code> is so much more than that, remember what I said about <code class=\"language-text\">company</code> and how it can communicate with other data sources, Helm is a fine example of exactly that, you can plug it into almost everything in emacs, or even if you are writing a plugin, you can easily integrate it with helm</p>\n<p>Check Kris Jenkins writing a <a href=\"https://www.youtube.com/watch?v=XjKtkEMUYGc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spotify client</a> for emacs and integrating it with Helm</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package helm\n  :ensure t\n  :config\n  (helm-mode 1)\n  (setq helm-autoresize-mode t)\n  (setq helm-buffer-max-length 40)\n  (global-set-key (kbd &quot;M-x&quot;) #&#39;helm-M-x)\n  (define-key helm-map (kbd &quot;S-SPC&quot;) &#39;helm-toggle-visible-mark)\n  (define-key helm-find-files-map (kbd &quot;C-k&quot;) &#39;helm-find-files-up-one-level))</code></pre></div>\n<p>this will install <code class=\"language-text\">helm</code> along with basic configs defining a couple of key maps</p>\n<ul>\n<li><code class=\"language-text\">M-x</code> now uses <code class=\"language-text\">helm-m-x</code> with auto-complete instead of the built in listing</li>\n<li><code class=\"language-text\">S-SPC</code> to mark multiple files</li>\n<li><code class=\"language-text\">C-k</code> will go up one level when inside <code class=\"language-text\">helm</code></li>\n</ul>\n<p>We are going to use <code class=\"language-text\">helm</code> with <code class=\"language-text\">projectile</code> using <code class=\"language-text\">helm-projectile</code></p>\n<h3>projectile <a href=\"https://github.com/bbatsov/projectile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a></h3>\n<p>This is an awesome plugin, now in emacs there is an idea of projects, you can switch to another project, find file in a project, jump to directory and so many different things, its super useful</p>\n<p>its simple, whenever you visit a git repo, projectile saves it in a config file, now whenever you want to change to another project, you will find the project that you have visited there</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package projectile\n  :ensure t\n  :defer t\n  :config\n  (projectile-global-mode))</code></pre></div>\n<p>dead simple, we are enabling projectile globally, we are going to use projectile through helm interface using <code class=\"language-text\">helm-projectile</code></p>\n<h3>helm-projectile <a href=\"https://github.com/bbatsov/helm-projectile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a></h3>\n<p>this is the plugin that connects projectile to use with helm, now you can find files in the project that are not ignored in <code class=\"language-text\">.gitignore</code> or switch between projects all using the <code class=\"language-text\">helm</code> interface</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(use-package helm-projectile\n  :bind ((&quot;C-S-P&quot; . helm-projectile-switch-project)\n         :map evil-normal-state-map\n         (&quot;C-p&quot; . helm-projectile))\n  :ensure t\n  :config\n  (evil-leader/set-key\n    &quot;ps&quot; &#39;helm-projectile-ag\n    &quot;pa&quot; &#39;helm-projectile-find-file-in-known-projects\n  ))</code></pre></div>\n<p>bind the following</p>\n<ul>\n<li><code class=\"language-text\">C-P</code> to find a file in the current project</li>\n<li><code class=\"language-text\">C-Shit-P</code> to switch projects</li>\n<li><code class=\"language-text\">&lt;leader&gt;ps</code> find phrase in current project (if you have <code class=\"language-text\">ag</code> installed)</li>\n<li><code class=\"language-text\">&lt;leader&gt;pa</code> find file in all projects</li>\n</ul>","frontmatter":{"title":"Emacs tips and best plugins to use with evil mode","date":"August 24, 2016"}}},"pageContext":{"slug":"emacs-tips-and-best-plugins-to-use-with-evil-mode/","previous":{"fields":{"slug":"why-i-switched-from-vim-to-emacs-with-evil-mode/"},"frontmatter":{"title":"Why I switched from vim to emacs + evil mode"}},"next":{"fields":{"slug":"making-a-game-with-react-and-redux-getting-started/"},"frontmatter":{"title":"Making a game with React and Redux: 01 Getting Started"}}}}